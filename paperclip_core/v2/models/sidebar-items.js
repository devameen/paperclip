initSidebarItems({"enum":[["CollectionFormat","Possible formats for array values in parameter."],["DataType","Supported data types."],["DataTypeFormat","Supported data type formats."],["Either","`Either` from \"either\" crate. We can't use that crate because we don't want the enum to be tagged during de/serialization."],["HttpMethod","The HTTP method used for an operation."],["OperationProtocol","The protocol used for an operation."],["ParameterIn","The location of the parameter."],["SchemaRepr","Wrapper for schema. This uses `Arc<RwLock<S>>` for interior mutability and differentiates raw schema from resolved schema (i.e., the one where `$ref` references point to the actual schema)."],["SpecFormat",""],["Version","OpenAPI version."]],"struct":[["Coder","Represents the en/decoder for some MIME media range."],["Coders","`x-coder` global extension for custom encoders and decoders."],["DefaultSchema","Default schema if your schema doesn't have any custom fields."],["DefaultSchemaRaw","NOTE: This is the raw version i.e., it doesn't have smart pointers to reuse definitions throughout the spec. Instead, it contains the actual schema with unresolved `$ref` fields."],["GenericApi","OpenAPI v2 spec generic over schema."],["Items","Items object."],["JSON_CODER","Default coder for JSON."],["JSON_MIME","Media range for JSON."],["MediaRange","Wrapper for `mime::MediaRange` to support `BTree{Set, Map}`."],["Operation","An operation."],["OperationMap","Path item."],["Parameter","Request parameter."],["Response","HTTP response."],["YAML_CODER","Default coder for YAML."],["YAML_MIME","Media range for YAML."]],"type":[["Api","OpenAPI v2 spec."]]});